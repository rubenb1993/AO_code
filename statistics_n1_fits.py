import numpy as npimport Zernike as Znimport matplotlib.pyplot as pltimport jsonfrom matplotlib.ticker import ScalarFormatter####folder_extensions = ["5_1/", "5_5/", "6_2/", "6_4/", "6_6/", "3_zerns_1/", "3_zerns_2/", "3_zerns_3/", "sub_zerns_1/", "sub_zerns_2/", "sub_zerns_3/", "sub_zerns_4/"]##folder_names = ["SLM_codes_matlab/20170504_" + folder_extensions[i] for i in range(len(folder_extensions))]##save_strings = ["5_1", "5_5", "6_2", "6_4", "6_6", "3_zerns_1", "3_zerns_2", "3_zerns_3", "sub_zerns_1", "sub_zerns_2", "sub_zerns_3", "sub_zerns_4"]##save_strings = [save_strings[i] + "_optimized_8" for i in range(len(save_strings))]##title_string = 'Single Zernike measurements'##save_fold = "SLM_codes_matlab/reconstructions/20170504_measurement/"##a_ref_ordering = 'fringe'##order = 'brug'#### 20170515 zernike measurements##folder_extensions = ["365_22/", "544_04/", "544_08/","544_17/","544_33/", "365_03/", "365_06/","365_11/",]##folder_names = ["SLM_codes_matlab/20170515_leica_" + folder_extensions[i] for i in range(len(folder_extensions))]##a_ref_ordering = 'brug' #for these measurements, fringe ordering was still used##save_strings = ["365_22", "544_04", "544_08", "544_17", "544_33", "365_03", "365_06","365_11"]##save_strings = [save_strings[i] + "_optimized_8" for i in range(len(folder_extensions))]##load_string = ["365_22", "544_04", "544_08", "544_17", "544_33", "365_03", "365_06","365_11"]##title_string = 'Lens measurements'##save_fold = "SLM_codes_matlab/reconstructions/20170515_measurement/"###### 20170512 random surface measurementsfolder_names = ["SLM_codes_matlab/20170512_rand_surf_" + str(i)+"/" for i in range(4)]save_strings = ["low", "medium", "high", "extreme"]save_strings = [save_strings[i] + "_optimized_8" for i in range(len(save_strings))] #string to save different plots withtitle_string = 'Random surfaces'a_ref_ordering = 'brug'save_fold = "SLM_codes_matlab/reconstructions/20170512_measurement/"convert_a = (a_ref_ordering == 'fringe' or a_ref_ordering == 'Fringe')n_min = 2n_max = 10n_maxes = np.arange(n_min, n_max)j_maxes = np.copy(n_maxes)#np.insert(np.rint(np.logspace(1.1, 2.1, num = 15)),0, 47)show_all_nonzero = Falseorder = 'brug'j_dict = Zn.max_n_to_j(n_maxes, order = order)errors = np.empty((2,0))errors_2 = np.empty((2,0))errors_3 = np.empty((2,0))inset_1 = Falseinset_2 = Trueshow_tip_tilt = Falseif show_tip_tilt:     lowest_order = 1    title_string += ' with tip/tilt'else:    lowest_order = 2    title_string += ' without tip/tilt'for jj in range(len(folder_names)):    folder_name = folder_names[jj]    save_string = save_strings[jj]    a_ref = np.load(folder_name + "reference_slm_vector.npy")    if convert_a:        a_ref = Zn.convert_fringe_2_brug(a_ref)    for ii in range(len(n_maxes)):        n_atm = n_maxes[ii]        m_atm = np.arange(-n_atm, n_atm + 2, 2)        j = j_dict[str(n_atm)]        j_max = np.max(j)        n_interest = n_maxes[ii] - 1        m_interest = np.arange(-n_interest, n_interest + 2, 2)        j_interest = Zn.Zernike_nm_2_j(n_interest, m_interest, ordering = order) - 2        coeff_dict = np.load(folder_name + "coeff_dictionary_j_" + save_string + "_" + str(j_max) + ".npy").item()        n_interest_2 = n_maxes[ii] - 2        m_interest_2 = np.arange(-n_interest_2, n_interest_2+2, 2)        j_interest_2 = Zn.Zernike_nm_2_j(n_interest_2, m_interest_2, ordering = order) - 2        n_interest_3 = n_maxes[ii] - 3        m_interest_3 = np.arange(-n_interest_3, n_interest_3+2, 2)        j_interest_3 = Zn.Zernike_nm_2_j(n_interest_3, m_interest_3, ordering = order) - 2        a_lsq = coeff_dict['coeff_lsq']        a_janss = coeff_dict['coeff_janss']        if n_interest >= lowest_order:            lsq_err = (a_ref[j_interest] - a_lsq[j_interest])            janss_err = (a_ref[j_interest] - a_janss[j_interest])            error_stack = np.vstack((lsq_err, janss_err))            errors = np.append(errors, error_stack, axis = 1)        if n_interest_2 >= lowest_order:            lsq_err_2 = (a_ref[j_interest_2] - a_lsq[j_interest_2])            janss_err_2 = (a_ref[j_interest_2] - a_janss[j_interest_2])            error_stack_2 = np.vstack((lsq_err_2, janss_err_2))            errors_2 = np.append(errors_2, error_stack_2, axis = 1)        if n_interest_3 >= lowest_order:            lsq_err_3 = (a_ref[j_interest_3] - a_lsq[j_interest_3])            janss_err_3 = (a_ref[j_interest_3] - a_janss[j_interest_3])            error_stack_3 = np.vstack((lsq_err_3, janss_err_3))            errors_3 = np.append(errors_3, error_stack_3, axis = 1)min_max = np.max(np.abs(errors))##bins = np.linspace(-min_max, min_max, 50)##bins_2 = np.linspace(0, min_max, 30)##f, ax = plt.subplots(1,1)##ax.hist(errors.T, bins = bins, label = ['lsq', 'janss'], alpha = 0.7, range= (-0.5, 0.5))##ax.legend()####f2, ax2 = plt.subplots(1,1)##ax2.hist(np.abs(errors).T, bins = bins_2, label = ['lsq', 'janss'], alpha = 0.7)##ax2.legend()x_plot = np.array([1,2,3])f3, ax3 = plt.subplots(1,1)error_lsq = np.array([errors[0, :], errors_2[0, :], errors_3[0, :]])error_janss = np.array([errors[1, :], errors_2[1, :], errors_3[1, :]])bp0 = ax3.boxplot(error_lsq.T,  'o', positions = x_plot-0.15, widths = 0.25, patch_artist = True)bp1 = ax3.boxplot(error_janss.T,  'o', positions = x_plot+0.15, widths= 0.25, patch_artist = True)ax3.set_xlim(left = 0, right = 4)ax3.set_xticks(x_plot)ax3.set_xticklabels([r'$n+1$', r'$n+2$', r'$n+3$'])ax3.set_xlabel('Maximum Zernike order fitted')ax3.set_ylabel(r'$(a_n^m)_{ref} - (a_n^m)_{measured}$')colors = ['steelblue', 'darkorange']legend_1, = ax3.plot([1,1], color = colors[0])legend_2, = ax3.plot([1,1], color = colors[1])ax3.legend((legend_1, legend_2), ('LSQ', 'Janssen'))ax3.set_title(title_string)legend_1.set_visible(False)legend_2.set_visible(False)if inset_1:    left, bottom, width, height = [0.45, 0.2, 0.4, 0.3]    ax4 = f3.add_axes([left, bottom, width, height])    bp2 = ax4.boxplot(error_lsq.T,  'o', positions = x_plot-0.15, widths = 0.25, patch_artist = True)    bp3 = ax4.boxplot(error_janss.T,  'o', positions = x_plot+0.15, widths = 0.25, patch_artist = True)    ax4.set_xlim(left = 0, right = 4)    ax4.set_ylim([-0.08, 0.08])    ax4.set_xticks(x_plot)    ax4.set_xticklabels([r'$n+1$', r'$n+2$', r'$n+3$'])if inset_2:    left, bottom, width, height = [0.45, 0.6, 0.4, 0.15]    ax4 = f3.add_axes([left, bottom, width, height])    bp2 = ax4.boxplot(error_lsq.T,  'o', positions = x_plot-0.15, widths = 0.25, patch_artist = True)    bp3 = ax4.boxplot(error_janss.T,  'o', positions = x_plot+0.15, widths = 0.25, patch_artist = True)    ax4.set_xlim(left = 0, right = 4)    ax4.set_ylim([-0.08, 0.08])    ax4.set_xticks(x_plot)    ax4.set_xticklabels([r'$n+1$', r'$n+2$', r'$n+3$'])    if (inset_1 or inset_2):    all_plots = [bp0, bp1, bp2, bp3]    all_lsq_box = [bp0, bp2]    all_janss_box = [bp1, bp3]else:    all_plots = [bp0, bp1]    all_lsq_box = [bp0]    all_janss_box = [bp1]    for boxplots in all_plots:    for box in boxplots['boxes']:        box.set(linewidth = 2)    for lsq_boxes in all_lsq_box:        for lsq_box in lsq_boxes['boxes']:            lsq_box.set(facecolor = colors[0])    for janss_boxes in all_janss_box:        for janss_box in janss_boxes['boxes']:            janss_box.set(facecolor = colors[1])    for whisker in boxplots['whiskers']:        whisker.set(linewidth = 2)    for cap in boxplots['caps']:        cap.set(linewidth = 2)    for median in boxplots['medians']:        median.set(linewidth = 1, color = 'black')    for flier in boxplots['fliers']:##        flier.set_markerfacecolor('r')        flier.set(marker = 'o', alpha = 0.6)####if show_tip_tilt:##    f3.savefig(save_fold + "boxplot_errors_with_tip_tilt.png", bbox_inches = 'tight')##else:##    f3.savefig(save_fold + "boxplot_errors_without_tip_tilt.png", bbox_inches = 'tight')f1, ax1 = plt.subplots(1,1)bp0 = ax1.boxplot(np.array([np.log10(np.abs(error_lsq[i])) for i in range(3)]).T,  'o', positions = x_plot-0.15, widths = 0.25, patch_artist = True)bp1 = ax1.boxplot(np.array([np.log10(np.abs(error_janss[i])) for i in range(3)]).T,  'o', positions = x_plot+0.15, widths= 0.25, patch_artist = True)ax1.set_yticks(np.arange(-4, 2))ax1.set_yticklabels(10.0**np.arange(-4, 2))ax1.set_title('log')ax1.set_xlim(left = 0, right = 4)ax1.set_xticks(x_plot)ax1.set_xticklabels([r'$n+1$', r'$n+2$', r'$n+3$'])ax1.set_xlabel('Maximum Zernike order fitted')ax1.set_ylabel(r'$|(a_n^m)_{ref} - (a_n^m)_{measured}|$')all_plots_2 = [bp0, bp1]all_lsq_box = [bp0]all_janss_box = [bp1]    for boxplots in all_plots_2:    for box in boxplots['boxes']:        box.set(linewidth = 2)    for lsq_boxes in all_lsq_box:        for lsq_box in lsq_boxes['boxes']:            lsq_box.set(facecolor = colors[0])    for janss_boxes in all_janss_box:        for janss_box in janss_boxes['boxes']:            janss_box.set(facecolor = colors[1])    for whisker in boxplots['whiskers']:        whisker.set(linewidth = 2)    for cap in boxplots['caps']:        cap.set(linewidth = 2)    for median in boxplots['medians']:        median.set(linewidth = 1, color = 'black')    for flier in boxplots['fliers']:##        flier.set_markerfacecolor('r')        flier.set(marker = 'o', alpha = 0.6)legend_1, = ax1.plot([1,1], color = colors[0])legend_2, = ax1.plot([1,1], color = colors[1])ax1.legend((legend_1, legend_2), ('LSQ', 'Janssen'))legend_1.set_visible(False)legend_2.set_visible(False)if show_tip_tilt:    ax1.set_title(title_string + " (log scale)")    f1.savefig(save_fold + "log_boxplot_errors_with_tip_tilt.png", bbox_inches = 'tight')else:    ax1.set_title(title_string + " (log scale)")    f1.savefig(save_fold + "log_boxplot_errors_without_tip_tilt.png", bbox_inches = 'tight')plt.show()    